/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

/**
 *
 * @author ahmad
 */
import java.io.BufferedWriter;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;


public class MenuKategoriSampah extends javax.swing.JPanel {
    /**
     * Creates new form MenuKategoriSampah
     */
    DefaultTableModel model;
    public MenuKategoriSampah() {
        initComponents();
        String [] judul = {"No","Sampah","Ukuran","Kategori",};
        model =new DefaultTableModel(judul,0);
        tabel.setModel(model);
        tampilkan();
    }

    private void simpanKeFile() {
    try {
        FileWriter writer = new FileWriter("data_kategori_sampah.csv");
        // Menulis header kolom
        for (int i = 0; i < tabel.getColumnCount(); i++) {
            writer.append(tabel.getColumnName(i));
            if (i != tabel.getColumnCount() - 1) {
                writer.append(",");
            }
        }
        writer.append("\n");
        
        // Menulis data
        for (int i = 0; i < tabel.getRowCount(); i++) {
            for (int j = 0; j < tabel.getColumnCount(); j++) {
                writer.append(tabel.getValueAt(i, j).toString());
                if (j != tabel.getColumnCount() - 1) {
                    writer.append(",");
                }
            }
            writer.append("\n");
        }
        writer.flush();
        writer.close();
        JOptionPane.showMessageDialog(null, "Data berhasil disimpan ke file CSV!", "Info", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menyimpan data ke file!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
    }
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });
    }
    
    private void tampilkan() {
        int row = tabel.getRowCount();
        for(int a = 0; a<row;a++) {
            model.removeRow(0);
        }
        try {
           Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/pp2_tubes","root", "");
           ResultSet rs = cn.createStatement().executeQuery("SELECT * FROM kategorisampah");
           while(rs.next()) {
               String data [] = {rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
               model.addRow(data);
           }
        } catch (SQLException ex) {
            Logger.getLogger(MenuKategoriSampah.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private int generateNextNumber() {
        int rowCount = tabel.getRowCount();
        if (rowCount == 0) {
            return 1; // Jika tabel kosong, nomor pertama adalah 1
        } else {
            int maxNumber = Integer.MIN_VALUE;
            for (int i = 0; i < rowCount; i++) {
                int currentNumber = Integer.parseInt(tabel.getValueAt(i, 0).toString());
                if (currentNumber > maxNumber) {
                    maxNumber = currentNumber;
                }
            }
            return maxNumber + 1;
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btntambah = new javax.swing.JButton();
        btnhapus = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sampah = new javax.swing.JTextField();
        ukuran = new javax.swing.JTextField();
        kategori = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Kategori Sampah");

        btntambah.setText("Tambah");
        btntambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahActionPerformed(evt);
            }
        });

        btnhapus.setText("Hapus");
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });

        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });

        tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Sampah");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Ukuran");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Kategori");

        sampah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampahActionPerformed(evt);
            }
        });

        jButton1.setText("Simpan Ke File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btntambah)
                                .addGap(18, 18, 18)
                                .addComponent(btnedit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kategori, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ukuran, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(35, 35, 35)
                                .addComponent(sampah, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ukuran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btntambah, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnedit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btntambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahActionPerformed
    try {
        // Cek apakah semua kolom terisi
        if (sampah.getText().isEmpty() || ukuran.getText().isEmpty() || kategori.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Harap isi semua kolom sebelum menambahkan data!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        } else {
            int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menambahkan data?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Menambahkan nomor berikutnya secara otomatis
                int nextNo = generateNextNumber();

                // Proses penambahan data
                Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/pp2_tubes", "root", "");
                cn.createStatement().executeUpdate("insert into kategorisampah values" + "('" + nextNo + "', '" + sampah.getText() + "', '" + ukuran.getText() + "', '" + kategori.getText() + "')");
                tampilkan();
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan. Pastikan semua kolom terisi dengan benar!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btntambahActionPerformed

    private void sampahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampahActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampahActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
    try {
        int selectedRow = tabel.getSelectedRow();
        if (selectedRow >= 0) {
            // Mengambil id dari baris yang dipilih sebagai referensi unik
            String selectedId = model.getValueAt(selectedRow, 0).toString();

            // Proses update data
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/pp2_tubes", "root", "");
            String updateQuery = "UPDATE kategorisampah SET nama = ?, Ukuran = ?, Kategori = ? WHERE id = ?";
            try (PreparedStatement preparedStatement = cn.prepareStatement(updateQuery)) {
                preparedStatement.setString(1, sampah.getText());
                preparedStatement.setString(2, ukuran.getText());
                preparedStatement.setString(3, kategori.getText());
                preparedStatement.setString(4, selectedId); // Gunakan id dari baris yang dipilih
                preparedStatement.executeUpdate();
                tampilkan();
                JOptionPane.showMessageDialog(null, "Data berhasil diubah.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengubah data: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Pilih baris yang ingin diubah!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btneditActionPerformed

    private void tabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelMouseClicked
        // TODO add your handling code here:
        int selectedRow = tabel.getSelectedRow();
    
    if (selectedRow >= 0) {
        sampah.setText(model.getValueAt(selectedRow, 1).toString());
        ukuran.setText(model.getValueAt(selectedRow, 2).toString());
        kategori.setText(model.getValueAt(selectedRow, 3).toString());
    }
    }//GEN-LAST:event_tabelMouseClicked

    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
        try {
        int selectedRow = tabel.getSelectedRow();
        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Mengambil nomor dari baris yang dipilih sebagai referensi nomor unik
                String selectedid = model.getValueAt(selectedRow, 0).toString();

                // Hapus dari basis data
                Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/pp2_tubes", "root", "");
                String deleteQuery = "DELETE FROM kategorisampah WHERE id = ?";
                try (PreparedStatement preparedStatement = cn.prepareStatement(deleteQuery)) {
                    preparedStatement.setString(1, selectedid); // Gunakan nomor unik dari baris yang dipilih
                    preparedStatement.executeUpdate();
                    model.removeRow(selectedRow); // Hapus dari model tabel
                    JOptionPane.showMessageDialog(null, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menghapus data: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Pilih baris yang ingin dihapus!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnhapusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Method untuk menangani tombol "Simpan ke File"
    if (tabel.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "Tidak ada data untuk disimpan!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return; // Menghentikan eksekusi jika tidak ada data
    }
    
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Simpan File");
    
    int userSelection = fileChooser.showSaveDialog(null);
    
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave + ".txt"));

            int row = tabel.getRowCount();
            for (int a = 0; a < row; a++) {
                String rowData = "";
                for (int b = 0; b < tabel.getColumnCount(); b++) {
                    rowData += tabel.getValueAt(a, b) + "\t";
                }
                writer.write(rowData);
                writer.newLine();
            }

            writer.close();
            
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan di: " + fileToSave.getAbsolutePath(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menyimpan data ke dalam file!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnedit;
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btntambah;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kategori;
    private javax.swing.JTextField sampah;
    private javax.swing.JTable tabel;
    private javax.swing.JTextField ukuran;
    // End of variables declaration//GEN-END:variables
}
